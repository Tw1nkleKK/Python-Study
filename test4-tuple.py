"""
    因为列表是可以修改的，
    如果想要传递信息，不被篡改，列表就不合适了。

    元组 跟 列表 一样，都是可以封装多个、不同类型的元素在内。 === 只读的list
    最大的不同点 ： 元组一旦定义完成，就不可修改。
"""

# 1. 元组的定义
t1 = (1, 2, 3)
t2 = ()
t3 = tuple()

# 2. 定义单个元素的元素 -- 需添加逗号，不然会误以为是str类型
t4 = ("hello",)

# 3. 元组的嵌套
t5 = ((1,2,3),(4,5,6))

# 4.下标索引取出元素
num = t5[1][2]
print(num)

print("============================================")

# 2.元组的相关操作 -- 三个操作
#   index() : 查找某个数据，如果数据存在返回对应的下标，否则报错
#   count() : 统计某个数据在当前元组出现的次数
#   len(元组): 统计元组内的元素个数

t6 = (1, 2, 3, 6, 7, 8)
index = t6.index(8)
print(f"在t6元组中查找8的下标是{index}")

t7 = (1, 6, 6, 6, 7, 8)
count = t7.count(6)
print(f"在t7元组中元素6出现的次数{count}")

t8 = (1, 2, 3, 6, 7, 8)
num = len(t8)
print(f"t8元组中元素有{num}个")

print("==============================")

# 3.元组的遍历： while 和 for
index = 0
while index < len(t8):
    print(t8[index])
    index += 1

for item in t8:
    print(item)

print("==============================")

"""
    修改元组内容：
        不可以修改元组中的内容，否则直接报错；
        可以修改元组中的list内容(修改、增加、删除、反转等)
"""
t9 = (1, 2, ['z', 'z', 'k'])
t9[2][0] = 'zhou'
t9[2][1] = 'zi'
t9[2][2] = 'kai'
del t9[2][0]
t9[2].append("ZZK")
t9[2].extend('ZZK')
print(t9)

"""
    总结：
        1.可以容纳多个数据
        2.可以容纳不同类型的数据（混装）
        3.数据是有序存储的（下标索引）
        4.允许重复的数据出现
        5.不可以修改（增加或删除元素）
        6.支持for循环
    多数特征和list相似，不同之处在于不可修改的特性。
"""